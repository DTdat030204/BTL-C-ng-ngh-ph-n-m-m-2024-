// package com.se.ssps.server.entity.configuration;

// import org.springframework.data.annotation.Id;
// import org.springframework.data.mongodb.core.mapping.Document;
// import lombok.*;

// @Setter
// @Getter
// @AllArgsConstructor
// @NoArgsConstructor
// @Document(collection = "maxFileSize") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
// public class MaxFileSize {
//     @Id
//     private String id; // MongoDB s·ª≠ d·ª•ng ObjectId (d·∫°ng chu·ªói) l√†m kh√≥a ch√≠nh

//     private Double maxFileSize;
// }

// package com.se.ssps.server.entity.configuration;

// import org.springframework.data.annotation.Id;
// import org.springframework.data.mongodb.core.mapping.Document;
// import lombok.*;

// @Setter
// @Getter
// @AllArgsConstructor
// @NoArgsConstructor
// @Document(collection = "maxFileSize") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
// public class MaxFileSize {
//     @Id
//     private String id; // MongoDB s·ª≠ d·ª•ng ObjectId (d·∫°ng chu·ªói) l√†m kh√≥a ch√≠nh

//     private Double maxFileSize;

//     // Th√™m ph∆∞∆°ng th·ª©c getValue
//     public Double getValue() {
//         return this.maxFileSize;
//     }
// }

package com.se.ssps.server.entity.configuration;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import lombok.*;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "maxFileSize") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
public class MaxFileSize {
    @Id
    private String id; // MongoDB s·ª≠ d·ª•ng ObjectId (d·∫°ng chu·ªói) l√†m kh√≥a ch√≠nh

    private Double maxFileSize;

    // Th√™m ph∆∞∆°ng th·ª©c setter
    public void setValue(Double value) {
        this.maxFileSize = value;
    }

    // Th√™m ph∆∞∆°ng th·ª©c getValue
    public Double getValue() {
        return this.maxFileSize;
    }
}

/*
 * ### ƒê√°nh gi√° v√† gi·∫£i th√≠ch l·ªõp `MaxFileSize`
 * 
 * #### 1. **Vai tr√≤ trong h·ªá th·ªëng**
 * - L·ªõp **`MaxFileSize`** ƒë·∫°i di·ªán cho m·ªôt c·∫•u h√¨nh gi·ªõi h·∫°n k√≠ch th∆∞·ªõc t·ªëi ƒëa
 * c·ªßa t·ªáp tin ƒë∆∞·ª£c ph√©p t·∫£i l√™n trong h·ªá th·ªëng **HCMUT_SSPS**.
 * - **SPSO (Student Printing Service Officer)** s·∫Ω qu·∫£n l√Ω gi√° tr·ªã n√†y ƒë·ªÉ ƒë·∫£m
 * b·∫£o r·∫±ng c√°c t·ªáp tin ƒë∆∞·ª£c t·∫£i l√™n n·∫±m trong gi·ªõi h·∫°n cho ph√©p, tr√°nh g√¢y ra
 * l·ªói ho·∫∑c ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu su·∫•t h·ªá th·ªëng.
 * 
 * ---
 * 
 * #### 2. **C√°c th√†nh ph·∫ßn trong l·ªõp**
 * 
 * ```java
 * 
 * @Setter
 * 
 * @Getter
 * 
 * @AllArgsConstructor
 * 
 * @NoArgsConstructor
 * 
 * @Document(collection = "maxFileSize") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
 * public class MaxFileSize {
 * 
 * @Id
 * private String id; // MongoDB s·ª≠ d·ª•ng ObjectId (d·∫°ng chu·ªói) l√†m kh√≥a ch√≠nh
 * 
 * private Double maxFileSize;
 * 
 * // Th√™m ph∆∞∆°ng th·ª©c setter
 * public void setValue(Double value) {
 * this.maxFileSize = value;
 * }
 * 
 * // Th√™m ph∆∞∆°ng th·ª©c getValue
 * public Double getValue() {
 * return this.maxFileSize;
 * }
 * }
 * ```
 * 
 * - **Annotation `@Document(collection = "maxFileSize")`:**
 * - ƒê√°nh d·∫•u l·ªõp l√† m·ªôt t√†i li·ªáu trong MongoDB.
 * - T√†i li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u trong collection `maxFileSize`.
 * 
 * - **Annotation Lombok:**
 * - `@Setter` v√† `@Getter`: T·ª± ƒë·ªông t·∫°o c√°c ph∆∞∆°ng th·ª©c `set` v√† `get` cho t·∫•t
 * c·∫£ c√°c thu·ªôc t√≠nh.
 * - `@AllArgsConstructor` v√† `@NoArgsConstructor`: T·∫°o constructor c√≥ v√† kh√¥ng
 * c√≥ tham s·ªë.
 * 
 * - **Thu·ªôc t√≠nh `id`:**
 * - ƒê∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng `@Id`, ƒë√¢y l√† kh√≥a ch√≠nh c·ªßa t√†i li·ªáu trong MongoDB.
 * - MongoDB s·ª≠ d·ª•ng `ObjectId`, nh∆∞ng trong ·ª©ng d·ª•ng, n√≥ ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng
 * chu·ªói `String`.
 * 
 * - **Thu·ªôc t√≠nh `maxFileSize`:**
 * - Bi·ªÉu di·ªÖn gi√° tr·ªã k√≠ch th∆∞·ªõc t·ªëi ƒëa c·ªßa t·ªáp tin (ƒë∆°n v·ªã c√≥ th·ªÉ l√† **MB**
 * ho·∫∑c **GB** t√πy quy ƒë·ªãnh h·ªá th·ªëng).
 * - D√πng ki·ªÉu d·ªØ li·ªáu `Double` ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th·ªÉ l∆∞u c√°c gi√° tr·ªã ch√≠nh x√°c v√†
 * linh ho·∫°t h∆°n cho c√°c h·ªá th·ªëng y√™u c·∫ßu ƒë∆°n v·ªã k√≠ch th∆∞·ªõc nh·ªè.
 * 
 * - **Ph∆∞∆°ng th·ª©c `setValue(Double value)` v√† `getValue()`:**
 * - Hai ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c th√™m ƒë·ªÉ minh h·ªça c√°ch l√†m vi·ªác tr·ª±c ti·∫øp v·ªõi gi√°
 * tr·ªã `maxFileSize`.
 * - M·∫∑c d√π Lombok ƒë√£ t·ª± ƒë·ªông sinh c√°c ph∆∞∆°ng th·ª©c `get` v√† `set`, nh∆∞ng vi·ªác
 * th√™m th·ªß c√¥ng kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ch·ª©c nƒÉng.
 * 
 * ---
 * 
 * #### 3. **M·ªëi quan h·ªá v·ªõi c√°c th·ª±c th·ªÉ kh√°c**
 * - **`MaxFileSize`** l√† m·ªôt c·∫•u h√¨nh ƒë·ªôc l·∫≠p, kh√¥ng c√≥ m·ªëi quan h·ªá tr·ª±c ti·∫øp
 * v·ªõi c√°c th·ª±c th·ªÉ kh√°c.
 * - Tuy nhi√™n, n√≥ s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng trong logic c·ªßa h·ªá th·ªëng:
 * - **Ki·ªÉm tra tr∆∞·ªõc khi t·∫£i t·ªáp:** Khi ng∆∞·ªùi d√πng t·∫£i l√™n t·ªáp, h·ªá th·ªëng s·∫Ω so
 * s√°nh k√≠ch th∆∞·ªõc t·ªáp v·ªõi gi√° tr·ªã `maxFileSize`.
 * - **C·∫≠p nh·∫≠t gi√° tr·ªã:** **SPSO** c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã n√†y khi c·∫ßn (v√≠ d·ª•:
 * tƒÉng k√≠ch th∆∞·ªõc t·ªëi ƒëa cho c√°c t·ªáp ƒë·∫∑c bi·ªát).
 * 
 * ---
 * 
 * #### 4. **Repository**
 * ƒê·ªÉ l√†m vi·ªác v·ªõi MongoDB, c·∫ßn t·∫°o m·ªôt repository t∆∞∆°ng ·ª©ng.
 * 
 * ```java
 * package com.se.ssps.server.repository.configuration;
 * 
 * import org.springframework.data.mongodb.repository.MongoRepository;
 * import org.springframework.stereotype.Repository;
 * import com.se.ssps.server.entity.configuration.MaxFileSize;
 * 
 * @Repository
 * public interface MaxFileSizeRepository extends MongoRepository<MaxFileSize,
 * String> {
 * MaxFileSize findFirstByOrderByIdAsc(); // L·∫•y gi√° tr·ªã c·∫•u h√¨nh ƒë·∫ßu ti√™n
 * }
 * ```
 * 
 * ---
 * 
 * #### 5. **Service**
 * 
 * ```java
 * package com.se.ssps.server.service.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.stereotype.Service;
 * import com.se.ssps.server.entity.configuration.MaxFileSize;
 * import com.se.ssps.server.repository.configuration.MaxFileSizeRepository;
 * 
 * @Service
 * public class MaxFileSizeService {
 * 
 * @Autowired
 * private MaxFileSizeRepository maxFileSizeRepository;
 * 
 * // L·∫•y gi√° tr·ªã MaxFileSize
 * public Double getMaxFileSize() {
 * MaxFileSize maxFileSize = maxFileSizeRepository.findFirstByOrderByIdAsc();
 * return maxFileSize != null ? maxFileSize.getValue() : null;
 * }
 * 
 * // C·∫≠p nh·∫≠t gi√° tr·ªã MaxFileSize
 * public MaxFileSize updateMaxFileSize(Double newValue) {
 * MaxFileSize maxFileSize = maxFileSizeRepository.findFirstByOrderByIdAsc();
 * if (maxFileSize == null) {
 * maxFileSize = new MaxFileSize();
 * }
 * maxFileSize.setValue(newValue);
 * return maxFileSizeRepository.save(maxFileSize);
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 6. **Controller**
 * 
 * ```java
 * package com.se.ssps.server.controller.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.http.ResponseEntity;
 * import org.springframework.web.bind.annotation.*;
 * import com.se.ssps.server.service.configuration.MaxFileSizeService;
 * 
 * @RestController
 * 
 * @RequestMapping("/api/configuration/maxfilesize")
 * public class MaxFileSizeController {
 * 
 * @Autowired
 * private MaxFileSizeService maxFileSizeService;
 * 
 * // L·∫•y gi√° tr·ªã maxFileSize hi·ªán t·∫°i
 * 
 * @GetMapping
 * public ResponseEntity<Double> getMaxFileSize() {
 * return ResponseEntity.ok(maxFileSizeService.getMaxFileSize());
 * }
 * 
 * // C·∫≠p nh·∫≠t gi√° tr·ªã maxFileSize
 * 
 * @PutMapping
 * public ResponseEntity<Void> updateMaxFileSize(@RequestBody Double newValue) {
 * maxFileSizeService.updateMaxFileSize(newValue);
 * return ResponseEntity.noContent().build();
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 7. **Validation v√† Khuy·∫øn ngh·ªã**
 * - **Validation cho `maxFileSize`:**
 * - Th√™m logic ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o gi√° tr·ªã `maxFileSize` h·ª£p l·ªá, kh√¥ng √¢m ho·∫∑c
 * qu√° l·ªõn.
 * ```java
 * if (newValue <= 0 || newValue > 10000) { // V√≠ d·ª•: gi·ªõi h·∫°n t·ªëi ƒëa l√† 10 GB
 * throw new IllegalArgumentException("Invalid max file size value.");
 * }
 * ```
 * 
 * - **B·∫£o m·∫≠t:**
 * - ƒê·∫£m b·∫£o r·∫±ng ch·ªâ **SPSO** ho·∫∑c ng∆∞·ªùi d√πng c√≥ quy·ªÅn qu·∫£n tr·ªã m·ªõi ƒë∆∞·ª£c ph√©p
 * c·∫≠p nh·∫≠t gi√° tr·ªã n√†y.
 * 
 * - **T·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh:**
 * - Khi kh·ªüi t·∫°o h·ªá th·ªëng, c√≥ th·ªÉ l∆∞u gi√° tr·ªã m·∫∑c ƒë·ªãnh (v√≠ d·ª•: `20 MB`) n·∫øu
 * ch∆∞a c√≥ gi√° tr·ªã n√†o ƒë∆∞·ª£c c·∫•u h√¨nh trong collection `maxFileSize`.
 * 
 * ---
 * 
 * #### 8. **T√≥m t·∫Øt**
 * L·ªõp **`MaxFileSize`** v√† c√°c th√†nh ph·∫ßn li√™n quan ƒë·∫£m b·∫£o vi·ªác qu·∫£n l√Ω k√≠ch
 * th∆∞·ªõc t·ªáp tin t·∫£i l√™n m·ªôt c√°ch linh ho·∫°t v√† d·ªÖ d√†ng. V·ªõi thi·∫øt k·∫ø n√†y:
 * - **D·ªÖ d√†ng b·∫£o tr√¨**: Gi√° tr·ªã c√≥ th·ªÉ ƒë∆∞·ª£c thay ƒë·ªïi m√† kh√¥ng c·∫ßn ch·ªânh s·ª≠a m√£
 * ngu·ªìn.
 * - **ƒê·∫£m b·∫£o t√≠nh t∆∞∆°ng th√≠ch**: D·ªÖ d√†ng ki·ªÉm so√°t dung l∆∞·ª£ng t·ªáp tin ƒë·ªÉ ph√π
 * h·ª£p v·ªõi h·∫° t·∫ßng h·ªá th·ªëng.
 * - **H·ªó tr·ª£ t·ªët cho qu·∫£n tr·ªã vi√™n**: T√≠ch h·ª£p c√°c endpoint RESTful ƒë·ªÉ c·∫•u h√¨nh
 * gi√° tr·ªã th√¥ng qua giao di·ªán.
 * 
 * N·∫øu c·∫ßn th√™m t√≠nh nƒÉng ho·∫∑c c·∫£i ti·∫øn, h√£y ti·∫øp t·ª•c trao ƒë·ªïi nh√©! üòä
 */