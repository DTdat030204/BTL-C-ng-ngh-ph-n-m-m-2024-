package com.se.ssps.server.entity.configuration;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.se.ssps.server.entity.Printer;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.DBRef;

import lombok.*;

@Document(collection = "room") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Room {
    @Id
    private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String

    private String roomName;

    @DBRef
    @JsonIgnore
    private Printer printer; // Tham chi·∫øu ƒë·∫øn t√†i li·ªáu kh√°c trong MongoDB

    @JsonBackReference // B·ªè qua v√≤ng l·∫∑p
    @DBRef
    private Building building; // Tham chi·∫øu ƒë·∫øn t√†i li·ªáu Building

    
    //@JsonBackReference // B·ªè qua v√≤ng l·∫∑p
    @DBRef
    private Campus campus; // Th√™m tham chi·∫øu t·ªõi Campus

    private boolean isDel;

    private boolean havePrinter;

    public boolean equals(Room room) {
        if (this.id.equals(room.getId()))
            return true;
        return false;
    }
}



/*
 * ### ƒê√°nh gi√° v√† gi·∫£i th√≠ch l·ªõp `Room`
 * 
 * #### 1. **Vai tr√≤ trong h·ªá th·ªëng**
 * - L·ªõp **`Room`** ƒë·∫°i di·ªán cho m·ªôt ph√≤ng trong h·ªá th·ªëng. M·ªói ph√≤ng c√≥ th·ªÉ c√≥
 * c√°c thu·ªôc t√≠nh nh∆∞ t√™n ph√≤ng, th√¥ng tin v·ªÅ m√°y in, t√≤a nh√† ch·ª©a ph√≤ng, v√†
 * tr·∫°ng th√°i c·ªßa ph√≤ng (c√≥ th·ªÉ b·ªã x√≥a hay kh√¥ng).
 * - Th√¥ng qua l·ªõp n√†y, h·ªá th·ªëng c√≥ th·ªÉ qu·∫£n l√Ω c√°c ph√≤ng v√† c√°c th√¥ng tin li√™n
 * quan nh∆∞ m√°y in v√† t√≤a nh√†.
 * 
 * ---
 * 
 * #### 2. **C√°c th√†nh ph·∫ßn trong l·ªõp**
 * 
 * ```java
 * 
 * @Document(collection = "room") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
 * 
 * @AllArgsConstructor
 * 
 * @NoArgsConstructor
 * 
 * @Getter
 * 
 * @Setter
 * public class Room {
 * 
 * @Id
 * private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String
 * 
 * private String roomName;
 * 
 * @DBRef
 * 
 * @JsonIgnore
 * private Printer printer; // Tham chi·∫øu ƒë·∫øn t√†i li·ªáu kh√°c trong MongoDB
 * 
 * @DBRef
 * private Building building; // Tham chi·∫øu ƒë·∫øn t√†i li·ªáu Building
 * 
 * private boolean isDel;
 * 
 * private boolean havePrinter;
 * 
 * public boolean equals(Room room) {
 * if (this.id.equals(room.getId()))
 * return true;
 * return false;
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 3. **Chi ti·∫øt t·ª´ng th√†nh ph·∫ßn**
 * 
 * 1. **`@Document(collection = "room")`**:
 * - ƒê√°nh d·∫•u l·ªõp n√†y l√† m·ªôt t√†i li·ªáu MongoDB trong collection `room`.
 * - D·ªØ li·ªáu c·ªßa l·ªõp `Room` s·∫Ω ƒë∆∞·ª£c l∆∞u trong MongoDB trong m·ªôt collection c√≥
 * t√™n `room`.
 * 
 * 2. **`id`**:
 * - L√† kh√≥a ch√≠nh c·ªßa t√†i li·ªáu MongoDB, s·ª≠ d·ª•ng `ObjectId` nh∆∞ng √°nh x·∫° th√†nh
 * ki·ªÉu `String` trong Java.
 * 
 * 3. **`roomName`**:
 * - T√™n ph√≤ng, gi√∫p d·ªÖ d√†ng nh·∫≠n di·ªán v√† ph√¢n lo·∫°i c√°c ph√≤ng trong h·ªá th·ªëng.
 * 
 * 4. **`printer`**:
 * - Thu·ªôc t√≠nh tham chi·∫øu ƒë·∫øn m·ªôt t√†i li·ªáu `Printer` trong MongoDB.
 * - **`@DBRef`** cho bi·∫øt r·∫±ng tr∆∞·ªùng n√†y li√™n k·∫øt ƒë·∫øn t√†i li·ªáu kh√°c (t√†i li·ªáu
 * `Printer`).
 * - **`@JsonIgnore`**: ƒê·∫£m b·∫£o r·∫±ng tr∆∞·ªùng `printer` s·∫Ω kh√¥ng ƒë∆∞·ª£c serialize
 * khi chuy·ªÉn ƒë·ªëi t∆∞·ª£ng th√†nh JSON (gi√∫p tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n ho·∫∑c c√°c d·ªØ li·ªáu
 * kh√¥ng c·∫ßn thi·∫øt khi tr·∫£ v·ªÅ API).
 * 
 * 5. **`building`**:
 * - Li√™n k·∫øt v·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng `Building` qua `@DBRef`. M·ªói ph√≤ng thu·ªôc m·ªôt t√≤a
 * nh√† c·ª• th·ªÉ.
 * 
 * 6. **`isDel`**:
 * - ƒê·∫°i di·ªán cho tr·∫°ng th√°i x√≥a c·ªßa ph√≤ng. N·∫øu `true`, ph√≤ng n√†y ƒë∆∞·ª£c ƒë√°nh d·∫•u
 * l√† ƒë√£ b·ªã x√≥a.
 * 
 * 7. **`havePrinter`**:
 * - Ch·ªâ ra li·ªáu ph√≤ng n√†y c√≥ m√°y in hay kh√¥ng, thu·ªôc t√≠nh n√†y gi√∫p d·ªÖ d√†ng ki·ªÉm
 * tra tr·∫°ng th√°i c√≥ m√°y in trong ph√≤ng.
 * 
 * 8. **Ph∆∞∆°ng th·ª©c `equals(Room room)`**:
 * - Ki·ªÉm tra s·ª± t∆∞∆°ng ƒë∆∞∆°ng gi·ªØa hai ph√≤ng d·ª±a tr√™n `id`. N·∫øu `id` c·ªßa hai
 * ph√≤ng gi·ªëng nhau, tr·∫£ v·ªÅ `true`, ng∆∞·ª£c l·∫°i `false`.
 * 
 * ---
 * 
 * #### 4. **M·ªëi quan h·ªá v·ªõi c√°c th·ª±c th·ªÉ kh√°c**
 * - **Li√™n k·∫øt v·ªõi `Printer`**:
 * - M·ªói ph√≤ng c√≥ th·ªÉ c√≥ m·ªôt m√°y in. Th√¥ng qua `printer`, b·∫°n c√≥ th·ªÉ bi·∫øt ƒë∆∞·ª£c
 * ph√≤ng ƒë√≥ c√≥ m√°y in hay kh√¥ng.
 * - `@JsonIgnore` gi√∫p tr√°nh vi·ªác th√¥ng tin v·ªÅ m√°y in b·ªã ƒë∆∞a v√†o trong ph·∫£n h·ªìi
 * JSON khi API tr·∫£ v·ªÅ k·∫øt qu·∫£.
 * 
 * - **Li√™n k·∫øt v·ªõi `Building`**:
 * - M·ªói ph√≤ng thu·ªôc m·ªôt t√≤a nh√† (`Building`). M·ªëi quan h·ªá n√†y ƒë∆∞·ª£c th·ªÉ hi·ªán qua
 * thu·ªôc t√≠nh `building`, cho ph√©p truy xu·∫•t th√¥ng tin c·ªßa t√≤a nh√† m√† ph√≤ng ƒë√≥
 * thu·ªôc v·ªÅ.
 * 
 * ---
 * 
 * #### 5. **Repository**
 * 
 * ```java
 * package com.se.ssps.server.repository.configuration;
 * 
 * import org.springframework.data.mongodb.repository.MongoRepository;
 * import com.se.ssps.server.entity.configuration.Room;
 * 
 * public interface RoomRepository extends MongoRepository<Room, String> {
 * Room findByRoomName(String roomName); // T√¨m ph√≤ng theo t√™n
 * }
 * ```
 * 
 * ---
 * 
 * #### 6. **Service**
 * 
 * ```java
 * package com.se.ssps.server.service.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.stereotype.Service;
 * import com.se.ssps.server.entity.configuration.Room;
 * import com.se.ssps.server.repository.configuration.RoomRepository;
 * 
 * @Service
 * public class RoomService {
 * 
 * @Autowired
 * private RoomRepository roomRepository;
 * 
 * // L·∫•y th√¥ng tin ph√≤ng theo t√™n
 * public Room getRoomByName(String roomName) {
 * return roomRepository.findByRoomName(roomName);
 * }
 * 
 * // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t ph√≤ng
 * public Room saveOrUpdateRoom(Room room) {
 * return roomRepository.save(room);
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 7. **Controller**
 * 
 * ```java
 * package com.se.ssps.server.controller.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.http.ResponseEntity;
 * import org.springframework.web.bind.annotation.*;
 * import com.se.ssps.server.entity.configuration.Room;
 * import com.se.ssps.server.service.configuration.RoomService;
 * 
 * @RestController
 * 
 * @RequestMapping("/api/configuration/room")
 * public class RoomController {
 * 
 * @Autowired
 * private RoomService roomService;
 * 
 * // L·∫•y ph√≤ng theo t√™n
 * 
 * @GetMapping("/{roomName}")
 * public ResponseEntity<Room> getRoomByName(@PathVariable String roomName) {
 * return ResponseEntity.ok(roomService.getRoomByName(roomName));
 * }
 * 
 * // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t ph√≤ng
 * 
 * @PostMapping
 * public ResponseEntity<Room> saveRoom(@RequestBody Room room) {
 * return ResponseEntity.ok(roomService.saveOrUpdateRoom(room));
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 8. **T√≠ch h·ª£p v·ªõi c√°c h·ªá th·ªëng kh√°c**
 * 
 * - **Li√™n k·∫øt v·ªõi qu·∫£n l√Ω m√°y in**:
 * - B·∫°n c√≥ th·ªÉ d√πng l·ªõp n√†y ƒë·ªÉ ki·ªÉm tra li·ªáu ph√≤ng c√≥ m√°y in hay kh√¥ng v√† qu·∫£n
 * l√Ω vi·ªác ph√¢n b·ªï m√°y in cho t·ª´ng ph√≤ng.
 * 
 * - **Qu·∫£n l√Ω t√≤a nh√† v√† ph√≤ng**:
 * - S·ª≠ d·ª•ng l·ªõp n√†y ƒë·ªÉ qu·∫£n l√Ω c√°c ph√≤ng trong m·ªói t√≤a nh√†, v√≠ d·ª• nh∆∞ ph√¢n b·ªï
 * ph√≤ng theo y√™u c·∫ßu ho·∫∑c t√¨nh tr·∫°ng ph√≤ng c√≥ m√°y in.
 * 
 * ---
 * 
 * #### 9. **T√≥m t·∫Øt**
 * L·ªõp **`Room`** l√† m·ªôt th·ª±c th·ªÉ quan tr·ªçng trong h·ªá th·ªëng, gi√∫p qu·∫£n l√Ω c√°c
 * ph√≤ng v√† li√™n k·∫øt v·ªõi c√°c th·ª±c th·ªÉ kh√°c nh∆∞ t√≤a nh√† (`Building`) v√† m√°y in
 * (`Printer`). N√≥ h·ªó tr·ª£ c√°c t√≠nh nƒÉng nh∆∞ x√°c ƒë·ªãnh ph√≤ng c√≥ m√°y in hay kh√¥ng,
 * tr·∫°ng th√°i ph√≤ng, v√† kh·∫£ nƒÉng li√™n k·∫øt v·ªõi c√°c ph√≤ng kh√°c th√¥ng qua c√°c tham
 * chi·∫øu MongoDB.
 * 
 * N·∫øu b·∫°n c·∫ßn l√†m th√™m v·ªõi c√°c t√≠nh nƒÉng kh√°c ho·∫∑c mu·ªën m·ªü r·ªông logic trong h·ªá
 * th·ªëng, h√£y cho t√¥i bi·∫øt! üòä
 */