package com.se.ssps.server.entity.configuration;

import java.time.LocalDate;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import lombok.*;

@Document(collection = "page_allocation") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class PageAllocation {
    @Id
    private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String

    private Integer semester;

    private Integer year;

    private LocalDate allocatedDate; // Kh√¥ng c·∫ßn @Temporal v√¨ MongoDB h·ªó tr·ª£ ki·ªÉu ng√†y

    private Integer numOfPage;

    private boolean status;

    public PageAllocation(Integer semester, Integer year, Integer numOfPage, boolean status) {
        this.semester = semester;
        this.numOfPage = numOfPage;
        this.year = year;
        this.status = status;
    }

    public boolean getStatus() {
        return this.status;
    }
}



/*
 * ### ƒê√°nh gi√° v√† gi·∫£i th√≠ch l·ªõp `PageAllocation`
 * 
 * #### 1. **Vai tr√≤ trong h·ªá th·ªëng**
 * - L·ªõp **`PageAllocation`** ƒë·∫°i di·ªán cho th√¥ng tin ph√¢n b·ªï s·ªë trang in mi·ªÖn
 * ph√≠ ho·∫∑c h·∫°n m·ª©c in ·∫•n trong m·ªói h·ªçc k·ª≥ cho sinh vi√™n ho·∫∑c ng∆∞·ªùi d√πng trong
 * h·ªá th·ªëng.
 * - ƒê√¢y l√† m·ªôt ph·∫ßn trong c·∫•u h√¨nh h·ªá th·ªëng, gi√∫p qu·∫£n l√Ω h·∫°n m·ª©c in c·ªßa t·ª´ng
 * h·ªçc k·ª≥, ƒë·∫£m b·∫£o t√≠nh minh b·∫°ch v√† qu·∫£n l√Ω hi·ªáu qu·∫£ ngu·ªìn l·ª±c in ·∫•n.
 * 
 * ---
 * 
 * #### 2. **C√°c th√†nh ph·∫ßn trong l·ªõp**
 * 
 * ```java
 * 
 * @Document(collection = "page_allocation") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
 * 
 * @Getter
 * 
 * @Setter
 * 
 * @NoArgsConstructor
 * 
 * @AllArgsConstructor
 * public class PageAllocation {
 * 
 * @Id
 * private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String
 * 
 * private Integer semester;
 * 
 * private Integer year;
 * 
 * private LocalDate allocatedDate; // Kh√¥ng c·∫ßn @Temporal v√¨ MongoDB h·ªó tr·ª£
 * ki·ªÉu ng√†y
 * 
 * private Integer numOfPage;
 * 
 * private boolean status;
 * 
 * public PageAllocation(Integer semester, Integer year, Integer numOfPage,
 * boolean status) {
 * this.semester = semester;
 * this.numOfPage = numOfPage;
 * this.year = year;
 * this.status = status;
 * }
 * 
 * public boolean getStatus() {
 * return this.status;
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 3. **Chi ti·∫øt t·ª´ng thu·ªôc t√≠nh**
 * 
 * 1. **`@Document(collection = "page_allocation")`**:
 * - ƒê√°nh d·∫•u l·ªõp l√† m·ªôt t√†i li·ªáu MongoDB.
 * - C√°c ƒë·ªëi t∆∞·ª£ng thu·ªôc l·ªõp n√†y s·∫Ω ƒë∆∞·ª£c l∆∞u trong collection `page_allocation`.
 * 
 * 2. **`id`**:
 * - Thu·ªôc t√≠nh ƒë·∫°i di·ªán cho kh√≥a ch√≠nh c·ªßa t√†i li·ªáu.
 * - MongoDB s·ª≠ d·ª•ng ki·ªÉu `ObjectId` m·∫∑c ƒë·ªãnh, ƒë∆∞·ª£c √°nh x·∫° th√†nh chu·ªói `String`.
 * 
 * 3. **`semester`**:
 * - Bi·ªÉu th·ªã h·ªçc k·ª≥ (1 ho·∫∑c 2, c√≥ th·ªÉ th√™m 3 cho h·ªçc k·ª≥ h√®).
 * - Qu·∫£n l√Ω th√¥ng tin ph√¢n b·ªï theo t·ª´ng h·ªçc k·ª≥.
 * 
 * 4. **`year`**:
 * - Bi·ªÉu th·ªã nƒÉm h·ªçc c·ªßa h·ªçc k·ª≥ t∆∞∆°ng ·ª©ng (v√≠ d·ª•: 2024, 2025).
 * 
 * 5. **`allocatedDate`**:
 * - Ng√†y h·ªá th·ªëng th·ª±c hi·ªán ph√¢n b·ªï s·ªë trang in cho h·ªçc k·ª≥.
 * - S·ª≠ d·ª•ng ki·ªÉu **`LocalDate`**, l√† m·ªôt ki·ªÉu d·ªØ li·ªáu hi·ªán ƒë·∫°i t·ª´ Java 8 tr·ªü
 * l√™n, h·ªó tr·ª£ t·ªët cho MongoDB.
 * 
 * 6. **`numOfPage`**:
 * - S·ªë l∆∞·ª£ng trang ƒë∆∞·ª£c ph√¢n b·ªï cho h·ªçc k·ª≥ ƒë√≥.
 * - V√≠ d·ª•: 200 trang mi·ªÖn ph√≠ cho h·ªçc k·ª≥ 1 nƒÉm 2024.
 * 
 * 7. **`status`**:
 * - Tr·∫°ng th√°i c·ªßa th√¥ng tin ph√¢n b·ªï:
 * - **`true`**: ƒê√£ k√≠ch ho·∫°t (c√≥ hi·ªáu l·ª±c).
 * - **`false`**: Ch∆∞a k√≠ch ho·∫°t ho·∫∑c kh√¥ng c√≤n hi·ªáu l·ª±c.
 * - D√πng ƒë·ªÉ ki·ªÉm tra xem ph√¢n b·ªï hi·ªán t·∫°i c√≥ ƒëang ƒë∆∞·ª£c √°p d·ª•ng hay kh√¥ng.
 * 
 * ---
 * 
 * #### 4. **Constructor**
 * - **Constructor ƒë·∫ßy ƒë·ªß (`@AllArgsConstructor`)**:
 * - D√πng ƒë·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng v·ªõi t·∫•t c·∫£ c√°c thu·ªôc t√≠nh.
 * 
 * - **Constructor kh√¥ng tham s·ªë (`@NoArgsConstructor`)**:
 * - D√πng trong c√°c t√¨nh hu·ªëng y√™u c·∫ßu kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng r·ªóng, nh∆∞ khi l√†m vi·ªác
 * v·ªõi MongoDB ho·∫∑c c√°c th∆∞ vi·ªán JSON.
 * 
 * - **Constructor t√πy ch·ªânh**:
 * - ƒê∆∞·ª£c s·ª≠ d·ª•ng khi c·∫ßn kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng v·ªõi c√°c thu·ªôc t√≠nh c·ª• th·ªÉ, b·ªè qua
 * m·ªôt s·ªë tr∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt (nh∆∞ `allocatedDate`).
 * 
 * ---
 * 
 * #### 5. **C√°c ph∆∞∆°ng th·ª©c**
 * 
 * 1. **`getStatus()`**:
 * - Tr·∫£ v·ªÅ tr·∫°ng th√°i `status`.
 * - Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c vi·∫øt tay thay v√¨ d√πng Lombok, c√≥ th·ªÉ ƒë·ªÉ ph·ª•c v·ª• c√°c
 * m·ª•c ƒë√≠ch ƒë·∫∑c bi·ªát (v√≠ d·ª•: t√πy ch·ªânh logic n·∫øu c·∫ßn trong t∆∞∆°ng lai).
 * 
 * 2. **`setStatus()`**:
 * - T·ª± ƒë·ªông ƒë∆∞·ª£c t·∫°o b·ªüi `@Setter`, cho ph√©p thay ƒë·ªïi tr·∫°ng th√°i `status`.
 * 
 * ---
 * 
 * #### 6. **M·ªëi quan h·ªá v·ªõi c√°c th√†nh ph·∫ßn kh√°c**
 * - **H·ªá th·ªëng qu·∫£n l√Ω sinh vi√™n v√† in ·∫•n**:
 * - M·ªói sinh vi√™n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n ghi `PageAllocation` cho t·ª´ng h·ªçc k·ª≥,
 * th√¥ng qua m·ªôt th·ª±c th·ªÉ li√™n quan kh√°c (c√≥ th·ªÉ l√† `Student` ho·∫∑c `User`).
 * - **T√≠ch h·ª£p v·ªõi `PrintingLog`**:
 * - H·ªá th·ªëng s·∫Ω ki·ªÉm tra `PageAllocation` khi sinh vi√™n th·ª±c hi·ªán y√™u c·∫ßu in.
 * N·∫øu s·ªë trang in v∆∞·ª£t qu√° gi·ªõi h·∫°n `numOfPage`, y√™u c·∫ßu s·∫Ω b·ªã t·ª´ ch·ªëi ho·∫∑c
 * t√≠nh ph√≠ b·ªï sung.
 * 
 * ---
 * 
 * #### 7. **Repository**
 * 
 * ```java
 * package com.se.ssps.server.repository.configuration;
 * 
 * import org.springframework.data.mongodb.repository.MongoRepository;
 * import com.se.ssps.server.entity.configuration.PageAllocation;
 * import java.util.List;
 * 
 * public interface PageAllocationRepository extends
 * MongoRepository<PageAllocation, String> {
 * List<PageAllocation> findByYearAndSemester(Integer year, Integer semester);
 * PageAllocation findFirstByYearAndSemesterAndStatusTrue(Integer year, Integer
 * semester);
 * }
 * ```
 * 
 * ---
 * 
 * #### 8. **Service**
 * 
 * ```java
 * package com.se.ssps.server.service.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.stereotype.Service;
 * import com.se.ssps.server.entity.configuration.PageAllocation;
 * import com.se.ssps.server.repository.configuration.PageAllocationRepository;
 * import java.util.List;
 * 
 * @Service
 * public class PageAllocationService {
 * 
 * @Autowired
 * private PageAllocationRepository pageAllocationRepository;
 * 
 * // L·∫•y th√¥ng tin ph√¢n b·ªï theo nƒÉm v√† h·ªçc k·ª≥
 * public List<PageAllocation> getPageAllocationsByYearAndSemester(Integer year,
 * Integer semester) {
 * return pageAllocationRepository.findByYearAndSemester(year, semester);
 * }
 * 
 * // L·∫•y ph√¢n b·ªï hi·ªán t·∫°i (tr·∫°ng th√°i k√≠ch ho·∫°t)
 * public PageAllocation getActiveAllocation(Integer year, Integer semester) {
 * return pageAllocationRepository.findFirstByYearAndSemesterAndStatusTrue(year,
 * semester);
 * }
 * 
 * // T·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin ph√¢n b·ªï
 * public PageAllocation saveOrUpdatePageAllocation(PageAllocation
 * pageAllocation) {
 * return pageAllocationRepository.save(pageAllocation);
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 9. **Controller**
 * 
 * ```java
 * package com.se.ssps.server.controller.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.http.ResponseEntity;
 * import org.springframework.web.bind.annotation.*;
 * import com.se.ssps.server.entity.configuration.PageAllocation;
 * import com.se.ssps.server.service.configuration.PageAllocationService;
 * import java.util.List;
 * 
 * @RestController
 * 
 * @RequestMapping("/api/configuration/page_allocation")
 * public class PageAllocationController {
 * 
 * @Autowired
 * private PageAllocationService pageAllocationService;
 * 
 * // L·∫•y th√¥ng tin ph√¢n b·ªï theo nƒÉm v√† h·ªçc k·ª≥
 * 
 * @GetMapping
 * public ResponseEntity<List<PageAllocation>> getPageAllocations(
 * 
 * @RequestParam Integer year, @RequestParam Integer semester) {
 * return
 * ResponseEntity.ok(pageAllocationService.getPageAllocationsByYearAndSemester(
 * year, semester));
 * }
 * 
 * // T·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin ph√¢n b·ªï
 * 
 * @PostMapping
 * public ResponseEntity<PageAllocation> savePageAllocation(@RequestBody
 * PageAllocation pageAllocation) {
 * return ResponseEntity.ok(pageAllocationService.saveOrUpdatePageAllocation(
 * pageAllocation));
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 10. **T√≥m t·∫Øt**
 * L·ªõp **`PageAllocation`** v√† c√°c th√†nh ph·∫ßn li√™n quan gi√∫p qu·∫£n l√Ω hi·ªáu qu·∫£
 * vi·ªác ph√¢n b·ªï trang in mi·ªÖn ph√≠ cho sinh vi√™n:
 * - **ƒê·∫£m b·∫£o minh b·∫°ch**: Qu·∫£n l√Ω r√µ r√†ng h·∫°n m·ª©c t·ª´ng h·ªçc k·ª≥.
 * - **D·ªÖ d√†ng m·ªü r·ªông**: C√≥ th·ªÉ th√™m logic qu·∫£n l√Ω cho c√°c k·ª≥ ƒë·∫∑c bi·ªát ho·∫∑c
 * thay ƒë·ªïi h·∫°n m·ª©c.
 * - **Ph√π h·ª£p v·ªõi MongoDB**: S·ª≠ d·ª•ng ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p nh∆∞ `LocalDate`.
 * 
 * N·∫øu c·∫ßn ch·ªânh s·ª≠a th√™m ho·∫∑c t√≠ch h·ª£p s√¢u h∆°n, h√£y ti·∫øp t·ª•c chia s·∫ª nh√©! üòä
 */