package com.se.ssps.server.entity.configuration;

// import org.springframework.data.annotation.Id;
// import org.springframework.data.mongodb.core.mapping.Document;
// import lombok.*;

// @Setter
// @Getter
// @AllArgsConstructor
// @NoArgsConstructor
// @Document(collection = "page_unit_price") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
// public class PageUnitPrice {
//     @Id
//     private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String

//     private Integer price;
// }package com.se.ssps.server.entity.configuration;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import lombok.*;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@Document(collection = "page_unit_price") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
public class PageUnitPrice {
    @Id
    private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String

    private Integer price;

    // Th√™m ph∆∞∆°ng th·ª©c getValue
    public Integer getValue() {
        return this.price;
    }
    
    // Th√™m ph∆∞∆°ng th·ª©c setter cho price
    public void setValue(Integer price) {
        this.price = price;
    }
}



/*
 * ### ƒê√°nh gi√° v√† gi·∫£i th√≠ch l·ªõp `PageUnitPrice`
 * 
 * #### 1. **Vai tr√≤ trong h·ªá th·ªëng**
 * - L·ªõp **`PageUnitPrice`** ƒë·∫°i di·ªán cho ƒë∆°n gi√° c·ªßa m·ªói trang in trong h·ªá
 * th·ªëng.
 * - Gi√° tr·ªã n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√≠nh to√°n chi ph√≠ in khi ng∆∞·ªùi d√πng v∆∞·ª£t
 * qu√° s·ªë l∆∞·ª£ng trang ƒë∆∞·ª£c ph√¢n b·ªï mi·ªÖn ph√≠.
 * 
 * ---
 * 
 * #### 2. **C√°c th√†nh ph·∫ßn trong l·ªõp**
 * 
 * ```java
 * 
 * @Setter
 * 
 * @Getter
 * 
 * @AllArgsConstructor
 * 
 * @NoArgsConstructor
 * 
 * @Document(collection = "page_unit_price") // ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB
 * public class PageUnitPrice {
 * 
 * @Id
 * private String id; // MongoDB s·ª≠ d·ª•ng ObjectId, √°nh x·∫° th√†nh String
 * 
 * private Integer price;
 * 
 * // Th√™m ph∆∞∆°ng th·ª©c getValue
 * public Integer getValue() {
 * return this.price;
 * }
 * 
 * // Th√™m ph∆∞∆°ng th·ª©c setter cho price
 * public void setValue(Integer price) {
 * this.price = price;
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 3. **Chi ti·∫øt t·ª´ng th√†nh ph·∫ßn**
 * 
 * 1. **`@Document(collection = "page_unit_price")`**:
 * - ƒê·ªãnh nghƒ©a t√†i li·ªáu MongoDB v·ªõi collection t√™n l√† `page_unit_price`.
 * - M·ªói ƒë·ªëi t∆∞·ª£ng `PageUnitPrice` s·∫Ω ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng m·ªôt t√†i li·ªáu trong
 * MongoDB.
 * 
 * 2. **`id`**:
 * - L√† kh√≥a ch√≠nh c·ªßa t√†i li·ªáu, ƒë∆∞·ª£c MongoDB qu·∫£n l√Ω d∆∞·ªõi d·∫°ng `ObjectId` v√†
 * √°nh x·∫° th√†nh ki·ªÉu `String` trong Java.
 * 
 * 3. **`price`**:
 * - ƒê·∫°i di·ªán cho ƒë∆°n gi√° m·ªói trang in (t√≠nh theo ƒë∆°n v·ªã ti·ªÅn t·ªá c·ªßa h·ªá th·ªëng).
 * - Ki·ªÉu `Integer` ph√π h·ª£p v√¨ gi√° tr·ªã th∆∞·ªùng l√† s·ªë nguy√™n.
 * 
 * 4. **Ph∆∞∆°ng th·ª©c `getValue()` v√† `setValue(Integer price)`**:
 * - **`getValue()`**: Tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa thu·ªôc t√≠nh `price`.
 * - **`setValue()`**: C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi cho thu·ªôc t√≠nh `price`.
 * 
 * 5. **Constructor**:
 * - **`@AllArgsConstructor`**: T·∫°o ƒë·ªëi t∆∞·ª£ng v·ªõi ƒë·∫ßy ƒë·ªß c√°c tham s·ªë.
 * - **`@NoArgsConstructor`**: Cho ph√©p t·∫°o ƒë·ªëi t∆∞·ª£ng r·ªóng, thu·∫≠n ti·ªán khi l√†m
 * vi·ªác v·ªõi MongoDB ho·∫∑c c√°c th∆∞ vi·ªán JSON.
 * 
 * ---
 * 
 * #### 4. **M·ªëi quan h·ªá v·ªõi c√°c th·ª±c th·ªÉ kh√°c**
 * - **Li√™n quan ƒë·∫øn `PageAllocation`**:
 * - Khi sinh vi√™n v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng trang mi·ªÖn ph√≠ trong m·ªôt h·ªçc k·ª≥
 * (`numOfPage` trong `PageAllocation`), ƒë∆°n gi√° t·ª´ `PageUnitPrice` s·∫Ω ƒë∆∞·ª£c s·ª≠
 * d·ª•ng ƒë·ªÉ t√≠nh to√°n chi ph√≠ in th√™m.
 * 
 * - **T√≠ch h·ª£p v·ªõi h·ªá th·ªëng thanh to√°n**:
 * - Gi√° tr·ªã `price` s·∫Ω ƒë∆∞·ª£c d√πng trong logic t√≠nh to√°n t·ªïng chi ph√≠ in v√† t√≠ch
 * h·ª£p v·ªõi c√°c c·ªïng thanh to√°n ho·∫∑c h√≥a ƒë∆°n.
 * 
 * ---
 * 
 * #### 5. **Repository**
 * 
 * ```java
 * package com.se.ssps.server.repository.configuration;
 * 
 * import org.springframework.data.mongodb.repository.MongoRepository;
 * import com.se.ssps.server.entity.configuration.PageUnitPrice;
 * 
 * public interface PageUnitPriceRepository extends
 * MongoRepository<PageUnitPrice, String> {
 * PageUnitPrice findFirstByOrderByIdDesc(); // L·∫•y gi√° tr·ªã ƒë∆°n gi√° m·ªõi nh·∫•t
 * }
 * ```
 * 
 * ---
 * 
 * #### 6. **Service**
 * 
 * ```java
 * package com.se.ssps.server.service.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.stereotype.Service;
 * import com.se.ssps.server.entity.configuration.PageUnitPrice;
 * import com.se.ssps.server.repository.configuration.PageUnitPriceRepository;
 * 
 * @Service
 * public class PageUnitPriceService {
 * 
 * @Autowired
 * private PageUnitPriceRepository pageUnitPriceRepository;
 * 
 * // L·∫•y ƒë∆°n gi√° hi·ªán t·∫°i
 * public PageUnitPrice getCurrentUnitPrice() {
 * return pageUnitPriceRepository.findFirstByOrderByIdDesc();
 * }
 * 
 * // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t ƒë∆°n gi√°
 * public PageUnitPrice saveOrUpdateUnitPrice(PageUnitPrice unitPrice) {
 * return pageUnitPriceRepository.save(unitPrice);
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 7. **Controller**
 * 
 * ```java
 * package com.se.ssps.server.controller.configuration;
 * 
 * import org.springframework.beans.factory.annotation.Autowired;
 * import org.springframework.http.ResponseEntity;
 * import org.springframework.web.bind.annotation.*;
 * import com.se.ssps.server.entity.configuration.PageUnitPrice;
 * import com.se.ssps.server.service.configuration.PageUnitPriceService;
 * 
 * @RestController
 * 
 * @RequestMapping("/api/configuration/page_unit_price")
 * public class PageUnitPriceController {
 * 
 * @Autowired
 * private PageUnitPriceService pageUnitPriceService;
 * 
 * // L·∫•y ƒë∆°n gi√° hi·ªán t·∫°i
 * 
 * @GetMapping
 * public ResponseEntity<PageUnitPrice> getCurrentUnitPrice() {
 * return ResponseEntity.ok(pageUnitPriceService.getCurrentUnitPrice());
 * }
 * 
 * // T·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t ƒë∆°n gi√°
 * 
 * @PostMapping
 * public ResponseEntity<PageUnitPrice> saveUnitPrice(@RequestBody PageUnitPrice
 * unitPrice) {
 * return
 * ResponseEntity.ok(pageUnitPriceService.saveOrUpdateUnitPrice(unitPrice));
 * }
 * }
 * ```
 * 
 * ---
 * 
 * #### 8. **T√≠ch h·ª£p v·ªõi h·ªá th·ªëng in ·∫•n**
 * - Khi th·ª±c hi·ªán m·ªôt y√™u c·∫ßu in:
 * 1. Ki·ªÉm tra s·ªë trang ƒë√£ in so v·ªõi s·ªë trang mi·ªÖn ph√≠ ƒë∆∞·ª£c ph√¢n b·ªï
 * (`numOfPage`).
 * 2. N·∫øu v∆∞·ª£t qu√°, t√≠nh ph√≠ b·ªï sung b·∫±ng c√°ch s·ª≠ d·ª•ng gi√° tr·ªã `price` t·ª´
 * `PageUnitPrice`.
 * 3. C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n v√† h√≥a ƒë∆°n.
 ** 
 * V√≠ d·ª• logic t√≠nh ph√≠**:
 * 
 * ```java
 * public Double calculatePrintingCost(int pagesPrinted, int freePages,
 * PageUnitPrice unitPrice) {
 * int excessPages = pagesPrinted - freePages;
 * if (excessPages > 0) {
 * return excessPages * unitPrice.getValue();
 * }
 * return 0.0;
 * }
 * ```
 * 
 * ---
 * 
 * #### 9. **T√≥m t·∫Øt**
 * L·ªõp **`PageUnitPrice`** ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë∆°n gi·∫£n nh∆∞ng ƒë√≥ng vai tr√≤ quan tr·ªçng
 * trong h·ªá th·ªëng:
 * - Qu·∫£n l√Ω gi√° tr·ªã ƒë∆°n gi√° m·ªói trang in.
 * - D·ªÖ d√†ng m·ªü r·ªông ho·∫∑c c·∫≠p nh·∫≠t gi√° tr·ªã khi c·∫ßn thi·∫øt.
 * - Li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi c√°c logic t√≠nh to√°n chi ph√≠ in.
 * 
 * N·∫øu c·∫ßn h·ªó tr·ª£ th√™m ho·∫∑c m·ªü r·ªông, h√£y chia s·∫ª th√™m th√¥ng tin nh√©! üòä
 */